package{			import fl.controls.Button;	import fl.motion.Color;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.events.TouchEvent;	import flash.geom.ColorTransform;	import flash.text.Font;	import flash.text.TextField;	import flash.text.TextFieldType;	import flash.text.TextFormat;	import flash.ui.Multitouch;	import flash.ui.MultitouchInputMode;	import flash.events.KeyboardEvent;	import fl.controls.UIScrollBar;		public class MultiLangKeypad extends MovieClip	{		var txt:TextField;		var screen:int=1;		var dad:Category= Category (parent);		var noteMaxChar:int = 250;		var categMaxChar:int = 100;		var charNum:int ;		var spacePressed:Boolean = false;				var myFont:Font = new btnFont();		var myTextFormat:TextFormat = new TextFormat();				var prev_screen:uint;			public function MultiLangKeypad(iTxt:TextField):void		{						super();						if ( flash.ui.Keyboard.CAPS_LOCK )			{				//stop the clip on caps frame => 1				gotoAndStop(1);			}			else			{				//stop the clip on small frame => 3				gotoAndStop(3);			}							myTextFormat.font = myFont.fontName;			//addEventListenersFrame1();						txt=iTxt;			txt.wordWrap = true;			txt.text = "";						this.visible = false;						addEventListenersGeneral();					}				function startType()		{			this.visible = true;		}				function endType()		{			txt.type = TextFieldType.DYNAMIC			this.visible = false;		}						function addEventListenersGeneral():void		{			this.addEventListener(KeyboardEvent.KEY_DOWN, typeLetter);						lang_btn.addEventListener(MouseEvent.CLICK, languageKey);			lang_btn.setStyle("embedFonts", true);			lang_btn.setStyle("textFormat", myTextFormat);						caps_btn.addEventListener(MouseEvent.CLICK, capsKey);			caps_btn.setStyle("embedFonts", true);			caps_btn.setStyle("textFormat", myTextFormat);						shift_btn.addEventListener(MouseEvent.CLICK, shiftKey);			shift_btn.setStyle("embedFonts", true);			shift_btn.setStyle("textFormat", myTextFormat);						space_btn.addEventListener(MouseEvent.CLICK, spaceKey);			space_btn.setStyle("embedFonts", true);			space_btn.setStyle("textFormat", myTextFormat);						enter_btn.addEventListener(MouseEvent.CLICK, enterKey);			enter_btn.setStyle("embedFonts", true);			enter_btn.setStyle("textFormat", myTextFormat);						min_btn.addEventListener(MouseEvent.CLICK, minKey);			min_btn.setStyle("embedFonts", true);			min_btn.setStyle("textFormat", myTextFormat);						finish_btn.addEventListener(MouseEvent.CLICK, finishKey);			finish_btn.setStyle("embedFonts", true);			finish_btn.setStyle("textFormat", myTextFormat);			//finish_btn.transform.colorTransform =new ColorTransform(0,1,0,1);						backspace_btn.addEventListener(MouseEvent.CLICK, backspaceKey);			backspace_btn.setStyle("embedFonts", true);			backspace_btn.setStyle("textFormat", myTextFormat);						clear_btn.addEventListener(MouseEvent.CLICK, clearKey);			clear_btn.setStyle("embedFonts", true);			clear_btn.setStyle("textFormat", myTextFormat);						btn1.addEventListener(MouseEvent.CLICK, typeKey);			btn1.setStyle("embedFonts", true);			btn1.setStyle("textFormat", myTextFormat);						btn2.addEventListener(MouseEvent.CLICK, typeKey);			btn2.setStyle("embedFonts", true);			btn2.setStyle("textFormat", myTextFormat);						addTxtKeyEventListeners(1);						background.addEventListener(MouseEvent.MOUSE_DOWN, startDragPad);			background.addEventListener(MouseEvent.MOUSE_UP, stopDragPad);					}				function addTxtKeyEventListeners(frame:uint):void		{			for (var i:uint=1;i<=26;i++) 			{				trace("Gettingchild btn"+frame+"_"+i+":"+getChildByName("btn"+frame+"_"+i));				getChildByName("btn"+frame+"_"+i).addEventListener(MouseEvent.CLICK, typeKey);				Button (getChildByName("btn"+frame+"_"+i)).setStyle("embedFonts", true);				Button (getChildByName("btn"+frame+"_"+i)).setStyle("textFormat", myTextFormat);			}		}						function shiftKey(e:MouseEvent):void		{			shiftScreen();		}				function languageKey(e:MouseEvent):void		{			switchLanguage();		}				function capsKey(e:MouseEvent):void		{			switchCaps();		}				function typeLetter(e:KeyboardEvent):void		{			trace("Key Pressed: " + String.fromCharCode(e.charCode) +         " (character code: " + e.charCode + ")");						// if printable char			if( e.charCode >= 32 && e.charCode <= 126)			{	 //if letter 				if( e.keyCode >=65 && e.keyCode <=90 )				 	mapCharCodeToBtn(e.keyCode);				else				{						if (e.charCode == 32)						spacePressed = true;											addCharacter(String.fromCharCode(e.charCode));				}			}							//if backspace is pressed			if( e.keyCode == 8 )				eraseCharacter();							//if CAPS is pressed			if( e.keyCode == 20 )				switchCaps();							//if ENTER is pressed			if( e.keyCode == 13 )				enterKey(null);		}				function typeKey(e:MouseEvent):void		{			if (!spacePressed)			{				trace("Pressed key:" +e.target.label);				addCharacter(e.target.label);			}			else			{				// Reset the sapce flag				spacePressed=false;			}		}				function spaceKey(e:MouseEvent):void		{			addCharacter(" ");		}				function enterKey(e:MouseEvent):void		{			endType();			if(this.parent is Category)			{				// inform parent about done typing				Category(this.parent).doneTyping();			}						if(this.parent is ManualNote)			{				// inform parent about done typing				ManualNote(this.parent).doneTyping();			}		}				function backspaceKey(e:MouseEvent):void		{			eraseCharacter();		}				function clearKey(e:MouseEvent):void		{			txt.text="";			if(this.parent is Category){				charNum = categMaxChar;				Category(this.parent).charLeft.text =  charNum.toString();			}			else if(this.parent is ManualNote){				charNum = noteMaxChar;				ManualNote(this.parent).charLeft.text =  charNum.toString();			}		}				function minKey(e:MouseEvent):void		{						this.visible=false;		}				function finishKey(e:MouseEvent):void		{			this.endType();						if(this.parent is Category)			{				this.txt.text = Category(this.parent).categoryName;				Category(this.parent).cancelTyping();			}						if(this.parent is ManualNote)			{				// inform parent about done typing				ManualNote(this.parent).cancelTyping();			}						/*			if(main(this.parent.parent).screenDimActive==false)			{				Category(this.parent).catName.text = Category(this.parent).categoryName;				this.visible=false;				//log event				main(this.parent.parent).log('Category "'+Category(this.parent).categoryName+'" added.');			}			else			{				e.target.setStyle("emphasizedPadding", 1);							//Cancel Category creation				main(this.parent.parent).removeChild(main(this.parent.parent).screenDim);				main(this.parent.parent).screenDimActive==false;				this.visible=false;				if(this.parent is Category)				{					Category(this.parent).visible=false;					Category(this.parent).catState = "Cancelled";				}				if(this.parent is ManualNote)					ManualNote(this.parent).visible=false;				trace('Cancel category creation!');								//log event				main(this.parent.parent).log('Category Addition Cancelled.');			}			*/		}				function startDragPad(e:MouseEvent)		{			this.startDrag();		}				function stopDragPad(e:MouseEvent)		{			this.stopDrag();		}				/********************************************		 * Helper Functions		 *******************************************/		function addCharacter(k:String)		{			if(this.parent is Category)			{				if (txt.text.length<categMaxChar)				{					//add new line when reached 50 chars					//if(txt.text.length > 50)					//	txt.appendText("\n");											txt.appendText(k);					charNum = categMaxChar-txt.text.length;					Category(this.parent).charLeft.text =  charNum.toString();				}			}			else if(this.parent is ManualNote)			{				if (txt.text.length<noteMaxChar)				{					txt.appendText(k);					charNum = noteMaxChar-txt.text.length;					ManualNote(this.parent).charLeft.text =  charNum.toString();					ManualNote(this.parent).txtScrollbar.update();				}			}		}				function eraseCharacter()		{			txt.text= txt.text.substring(0, txt.text.length-1);			if(this.parent is Category){								if(txt.text.length<categMaxChar)				{					charNum = categMaxChar-txt.text.length;					Category(this.parent).charLeft.text =  charNum.toString();				}							}			else if(this.parent is ManualNote){				if(txt.text.length<noteMaxChar)				{					charNum = noteMaxChar-txt.text.length;					ManualNote(this.parent).charLeft.text =  charNum.toString();				}			}		}				function switchLanguage()		{			switch(screen)			{				case 1:					screen = 4;					break;				case 3:					screen = 5;					break;				case 4:					screen = 1;					break;				case 5:					screen = 3;					break;			}						gotoAndStop(screen);			addTxtKeyEventListeners(screen);		}				function switchCaps()		{			switch(screen)			{				case 1:					screen = 3;					break;				case 3:					screen = 1;					break;				case 4:					screen = 5;					break;				case 5:					screen = 4;					break;			}						gotoAndStop(screen);			addTxtKeyEventListeners(screen);		}				function shiftScreen()		{			if(screen!=2)			{				prev_screen = screen;				screen=2;			}			else			{				screen=prev_screen;			}						gotoAndStop(screen);			addTxtKeyEventListeners(screen);		}				function mapCharCodeToBtn(code:uint)		{			switch (code)			{				case 81: //Q					getChildByName("btn"+screen+"_1").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 87: //E					getChildByName("btn"+screen+"_2").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 69: //E					getChildByName("btn"+screen+"_3").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 82: //R					getChildByName("btn"+screen+"_4").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 84: //T					getChildByName("btn"+screen+"_5").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 89: //Y					getChildByName("btn"+screen+"_6").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 85: //U					getChildByName("btn"+screen+"_7").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 73: //I					getChildByName("btn"+screen+"_8").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 79: //O					getChildByName("btn"+screen+"_9").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 80: //P					getChildByName("btn"+screen+"_10").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 65: //A					getChildByName("btn"+screen+"_11").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 83: //S					getChildByName("btn"+screen+"_12").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 68: //D					getChildByName("btn"+screen+"_13").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 70: //F					getChildByName("btn"+screen+"_14").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 71: //G					getChildByName("btn"+screen+"_15").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 72: //H					getChildByName("btn"+screen+"_16").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 74: //J					getChildByName("btn"+screen+"_17").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 75: //K					getChildByName("btn"+screen+"_18").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 76: //L					getChildByName("btn"+screen+"_19").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 90: //Z					getChildByName("btn"+screen+"_20").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 88: //X					getChildByName("btn"+screen+"_21").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 67: //C					getChildByName("btn"+screen+"_22").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 86: //V					getChildByName("btn"+screen+"_23").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 66: //B					getChildByName("btn"+screen+"_24").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 78: //N					getChildByName("btn"+screen+"_25").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				case 77: //M					getChildByName("btn"+screen+"_26").dispatchEvent(new MouseEvent(MouseEvent.CLICK));					break;				default:					addCharacter(String.fromCharCode(code));					break;			}								}			}	}