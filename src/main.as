package{import flash.ui.ContextMenuBuiltInItems;import flash.display.MovieClip;import flash.display.Sprite;import flash.events.Event;import flash.events.MouseEvent;import flash.events.TouchEvent;import flash.filesystem.*;import flash.sensors.Accelerometer;import flash.ui.Multitouch;import flash.ui.MultitouchInputMode;import flash.display.StageDisplayState;import flash.display.Stage;import flash.system.fscommand;import flash.system.System;import flash.desktop.NativeApplication;import fl.controls.Label;import fl.controls.List;import fl.controls.TextInput;import fl.controls.ComboBox;import fl.controls.CheckBox;import fl.controls.Button;import flash.text.TextFormat;import flash.net.URLLoader;import flash.net.URLRequest;import flashx.textLayout.factory.StringTextLineFactory;import flash.text.engine.EastAsianJustifier;import flash.errors.IOError;import flash.events.IOErrorEvent;public class main extends MovieClip{	public var note_handler:noteHandler=new noteHandler();	public var CategoryArray:Array = new Array();	public var screenDim:screenDisable=new screenDisable();	public var screenDimActive:Boolean = false;	public var trashCategory:Trash = new Trash();	public var phase=2;	public var _stage:Stage;		public var today_date:Date;	public var thismonth:uint;		var nextStage:nextBtn= new nextBtn();	var exitMessage:exitMsg = new exitMsg();	var errorMessage:errorMsg = new errorMsg();		public var sourceURL:String = "http://www.andriioannou.com/ideasmapping/"	var xmlGivenURL:String="posts.xml";	//var phpClearURL:String="http://www.andriioannou.com/ideasmapping/clear.php";	var phpExportURL:String="http://www.andriioannou.com/ideasmapping/export.php";	var experimentURL:String="experiments.xml";	var xmlLoader = new URLLoader(); 		var phpLoader = new URLLoader(); 		public function main()	{				//To Activate Multitouch Interaction Input Mode		Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT;		//To Activate Full Screen Mode		addEventListener(Event.ADDED_TO_STAGE, stageAddHandler);				//Save Date and Time		today_date = new Date();		thismonth= today_date.getMonth()+1; 				//Add a change handler on the combobox		prefWindow.groupNum.addEventListener(Event.CHANGE, changeGroup);				//Add a change handler on the combobox		prefWindow.sourceList.addEventListener(Event.CHANGE, changeSource);		//Load Initial Preferences Window		prefWindow.loadBtn.addEventListener(MouseEvent.CLICK,loadApplication);				//Hide the loader		loaderClip.visible = false;		//Deactivate Stage 1 objects		startMsg.visible = false;		instrLbl1.visible = false;		instrLbl2.visible = false;		instrLbl3.visible = false;		instrLbl4.visible = false;		//startMsg.addEventListener(MouseEvent.CLICK,loadStage2);		//phpLoader.load(new URLRequest(phpClearURL)); 							//Deactivate Stage 2 objects		addCateg1.visible = false;		addCateg2.visible = false;		addCateg3.visible = false;		addCateg4.visible = false;		nextNote.visible = false;				//Deactivate Stage 3 objects		addNote1.visible=false;		addNote2.visible=false;		addNote3.visible=false;		addNote4.visible=false;		trashCan.visible=false;		trashCan2.visible=false;		exitBtn1.visible=false;		exitBtn2.visible=false;				trashCan.mouseEnabled = false;		trashCan.mouseChildren = false;				trashCan2.mouseEnabled = false;		trashCan2.mouseChildren = false;				//resize the components to enhance touch input		prefWindow.width = stage.width * 70 /100; //take 70% stage's width		prefWindow.height = stage.height * 60 /100; //take 60% stage's height				//set the text format to larger fonts		var myTextFormat:TextFormat = new TextFormat();		myTextFormat.size = 22;				//Increase the font size of dropDownList items		prefWindow.groupNum.dropdown.setRendererStyle("textFormat", myTextFormat);		prefWindow.groupNum.dropdown.setSize(prefWindow.groupNum.width,prefWindow.groupNum.height*10);		prefWindow.sourceList.dropdown.setRendererStyle("textFormat", myTextFormat);		prefWindow.sourceList.dropdown.setSize(prefWindow.sourceList.width,prefWindow.sourceList.height*10);		prefWindow.expList.dropdown.setRendererStyle("textFormat", myTextFormat);		prefWindow.expList.dropdown.setSize(prefWindow.expList.width*2,prefWindow.expList.height*10);				//load data		loadData();	}		function loadData()	{		experimentURL = sourceURL + "experiments.xml";				//load experiments		xmlLoader.load(new URLRequest(experimentURL)); 		xmlLoader.addEventListener(Event.COMPLETE, this.loadExperiments);		xmlLoader.addEventListener(IOErrorEvent.IO_ERROR, this.loadError);		startLoading();	}					function loadError(e:IOErrorEvent)	{		stopLoading();		addChild(screenDim);			screenDimActive=true;		addChild(errorMessage);		errorMessage.x=1920/2;		errorMessage.y=1080/2;				//log event		log("Error ["+e.text+"] while loading from source: "+experimentURL+".");				errorMessage.btnOK.addEventListener(TouchEvent.TOUCH_TAP, function(e:TouchEvent){ closeMessage();} );		errorMessage.btnOK.addEventListener(MouseEvent.CLICK, function(e:MouseEvent){ closeMessage();} );	}		function closeMessage(){		removeChild(screenDim);		screenDimActive=false;		removeChild(errorMessage);	}		// TODO: Load experiemnts from xml file	function loadExperiments(e:Event)	{		var xml:XML = new XML(xmlLoader.data);		var itemData:XML;				xml.ignoreWhitespace = true;					//populate list        for each( itemData in xml.elements() ) 		{			if(itemData.name() == "experiment")			{				loaderMsg("Adding Experiment: "+itemData.attribute("title").toString());				prefWindow.expList.addItem({label:itemData.attribute("title").toString()+" ("+itemData.attribute("date").toString()+")",										   data:itemData.attribute("id").toString()});			}		}        		prefWindow.expList.invalidate();//tell list to refresh itself		prefWindow.expList.selectedIndex = 0;				//add eventlistener		prefWindow.expList.addEventListener(Event.CHANGE, changeExperiment);				changeExperiment(e);				stopLoading();		log("Loaded Preference Screen.");	}		//Use the apropriate xml according to the group selection in prefWindow	function changeExperiment(e:Event)	{		var url:Array = prefWindow.postsDir.text.split("[");		//var part1:String = url[0];		url =  prefWindow.postsDir.text.split("]");		var part2:String = url[1];				this.xmlGivenURL = sourceURL + "[expid_" + prefWindow.expList.selectedItem.data + "]"+part2;				prefWindow.postsDir.text = this.xmlGivenURL;				//log action		log("Changed Experiment. New url: "+this.xmlGivenURL);	}		//Use the apropriate xml according to the group selection in prefWindow	function changeGroup(e:Event)	{		var url:Array = prefWindow.postsDir.text.split("-");				//Select the default posts location if no group is selected		if (prefWindow.groupNum.selectedItem.data == 0)		{			this.xmlGivenURL = url[0] + "-posts.xml";		}		else		{		 	this.xmlGivenURL = url[0]+ "-group" + prefWindow.groupNum.selectedLabel + "-posts.xml";		}				prefWindow.postsDir.text = this.xmlGivenURL;				//log action		log("Changed Group. New url: "+this.xmlGivenURL);	}		function changeSource(e:Event)	{		sourceURL = prefWindow.sourceList.selectedItem.label;				if ( sourceURL == "Local Folder" )		{			var dir:File = File.applicationDirectory;			sourceURL = dir.url+"ideasmappingweb/";		}		else		{			sourceURL = "http://"+sourceURL+"/";		}				log("Changed sourceURL. New URL: "+sourceURL);				this.loadData();	}		function loadApplication(e:MouseEvent):void{				prefWindow.visible = false;				this.xmlGivenURL = prefWindow.postsDir.text;				if (prefWindow.initStageField.selectedItem.data  == 1)		{			//Load application on Stage 1			loadStage1();		}		else		{			//Change the xml directory			//TODO Uncomment this line so posts will be extracted by the given url			if (prefWindow.initStageField.selectedItem.data  == 3)			{				loadStage3();			}			else			{				//Load application on stage 2				var fakeEvent:Event = e;				postsExported(fakeEvent);			}		}	}			public function loadStage1(){		//Deactivate Stage 1 objects		startMsg.visible = true;		instrLbl1.visible = true;		instrLbl2.visible = true;		instrLbl3.visible = true;		instrLbl4.visible = true;				//log event		log("\nStage 1 Loaded.");							//phpLoader.load(new URLRequest(phpClearURL)); 					startMsg.addEventListener(MouseEvent.CLICK,postsExported);		}	private function stageAddHandler(e:Event):void {		_stage = this.stage;		removeEventListener(Event.ADDED_TO_STAGE, stageAddHandler);		_stage.displayState=StageDisplayState.FULL_SCREEN_INTERACTIVE;	}		/*	public function loadStage2(e:MouseEvent)	{		//Export post it database		phpLoader.load(new URLRequest(phpExportURL)); 		phpLoader.addEventListener(Event.COMPLETE, postsExported);			}	*/		public function postsExported(e:Event){		//Create Trash Category		trace('add trash category!');		trashCategory.x = 300;		trashCategory.y = 900;		addChild(trashCategory);		trace('array length '+CategoryArray.length);		trashCategory.keyboard.visible = false;		trashCategory.catName.text = " Decide Later ";		trashCategory.isSet = true;		trashCategory.catTrash = true;		CategoryArray[CategoryArray.length] = trashCategory;		setChildIndex(trashCategory, CategoryArray.length);				//log event		log("\nStage 2 Loaded.");				//Load Note Handler			addChild(note_handler);		note_handler.loadNodes(this.xmlGivenURL);				//next Note event		nextNote.addEventListener(MouseEvent.CLICK, function(e:MouseEvent){								  note_handler.addOnStage();								  if(note_handler.notes.length == 0 && note_handler.images.length ==0 && note_handler.sounds.length == 0)								  	nextNote.visible = false;								});		nextNote.visible = true;				activateCategories();	}		public function stopDragNote(e:TouchEvent)	{		trace('stop drag note');		//Stop Dragging the note		//e.target.stopTouchDrag(e.touchPointID);		e.target.handleStopTouch(e);				if(e.target.scaleX<2)		{			e.target.scaleX=2;			e.target.scaleY=2		}				var topCategory:int = 0;		//Initialize Counter		var i:int = 0;		trace('Array Length:' +CategoryArray.length);		//Repeat until the end of the Category Array		while( i<CategoryArray.length) 		{ 			trace('Array Length:' +CategoryArray.length +'Counter:'+i);			//if (e.target.hitTestObject(CategoryArray[i])==true && CategoryArray[i].visible == true)    			if (CategoryArray[i].hitTestPoint(e.stageX,e.stageY,true)==true && CategoryArray[i].visible == true)    			{				trace('hits Category');				if (getChildIndex(CategoryArray[i])>=getChildIndex(CategoryArray[topCategory])){					topCategory=i;					trace('Category Index: '+getChildIndex(CategoryArray[i]));				}								}			i++;		}				//if (e.target.hitTestObject(CategoryArray[topCategory])==true && CategoryArray[topCategory].visible == true)  		if (CategoryArray[topCategory].hitTestPoint(e.stageX,e.stageY,true)==true && CategoryArray[topCategory].visible == true)		{			//Set the note as a child of the category			var tempNote:Note = new Note(e.target.txt.text, e.target.user,true);			tempNote.Initialize(e.target.txt.text, e.target.user,true);						//log event			log('Added note "'+tempNote.txt.text+'" in Category: '+CategoryArray[topCategory].catName.text);						note_handler.removeChild(Note(e.target));			note_handler.onstage.splice(note_handler.onstage.indexOf(tempNote),1);			//trace('child removed');			CategoryArray[topCategory].addChild(tempNote);			tempNote.x = e.stageX - CategoryArray[topCategory].x ;			tempNote.y = e.stageY - CategoryArray[topCategory].y;			tempNote.alpha = 0.5;						tempNote.checkLimits(e.touchPointID);							tempNote.scaleX *=1.5;			tempNote.scaleY *=1.5;			tempNote.addEventsInCategory();						//Load next note			note_handler.addOnStage();			//note_handler.streamSound();		}	}		public function stopDragSound(e:TouchEvent)	{		trace('stop drag note');		//Stop Dragging the note		//e.target.stopTouchDrag(e.touchPointID);		e.target.handleStopTouch(e);				if(e.target.scaleX<2)		{			e.target.scaleX=0.5;			e.target.scaleY=0.5;		}				var topCategory:int = 0;		//Initialize Counter		var i:int = 0;		trace('Array Length:' +CategoryArray.length);		//Repeat until the end of the Category Array		while( i<CategoryArray.length) 		{ 			trace('Array Length:' +CategoryArray.length +'Counter:'+i);			//if (e.target.hitTestObject(CategoryArray[i])==true && CategoryArray[i].visible == true)    			if (CategoryArray[i].hitTestPoint(e.stageX,e.stageY,true)==true && CategoryArray[i].visible == true)    			{				trace('hits Category');				if (getChildIndex(CategoryArray[i])>=getChildIndex(CategoryArray[topCategory])){					topCategory=i;					trace('Category Index: '+getChildIndex(CategoryArray[i]));				}								}			i++;		}				//if (e.target.hitTestObject(CategoryArray[topCategory])==true && CategoryArray[topCategory].visible == true)  		if (CategoryArray[topCategory].hitTestPoint(e.stageX,e.stageY,true)==true && CategoryArray[topCategory].visible == true)		{ 			//Set the note as a child of the category			var tempSound:SoundClass = new SoundClass(e.target.txt.text, e.target.user);			tempSound.InitializeSound();						//log event			log('Added sound '+tempSound.txt.text+' in Category: '+CategoryArray[topCategory].catName.text);						SoundClass(e.target).sndChannel.stop();			note_handler.removeChild(Note(e.target));			note_handler.onstage.splice(note_handler.onstage.indexOf(tempSound),1);			//trace('child removed');			CategoryArray[topCategory].addChild(tempSound);			tempSound.x = e.stageX - CategoryArray[topCategory].x ;			tempSound.y = e.stageY - CategoryArray[topCategory].y;			tempSound.alpha = 0.5;						tempSound.checkLimits(e.touchPointID);							//tempSound.scaleX *=1.5;			//tempSound.scaleY *=1.5;			tempSound.addEventsInCategory(); 						//Load next note			note_handler.addOnStage();			//note_handler.streamSound();		}	}		public function stopDragImage(e:TouchEvent)	{		trace('stop drag note');		//Stop Dragging the note		//e.target.stopTouchDrag(e.touchPointID);		e.target.handleStopTouch(e);				var topCategory:int = 0;		//Initialize Counter		var i:int = 0;		trace('Array Length:' +CategoryArray.length);		//Repeat until the end of the Category Array		while( i<CategoryArray.length) 		{ 			trace('Array Length:' +CategoryArray.length +'Counter:'+i);			//if (e.target.hitTestObject(CategoryArray[i])==true && CategoryArray[i].visible == true)    			if (CategoryArray[i].hitTestPoint(e.stageX,e.stageY,true)==true && CategoryArray[i].visible == true)    			{				trace('hits Category');				if (getChildIndex(CategoryArray[i])>=getChildIndex(CategoryArray[topCategory])){					topCategory=i;					trace('Category Index: '+getChildIndex(CategoryArray[i]));				}								}			i++;		}				//if (e.target.hitTestObject(CategoryArray[topCategory])==true && CategoryArray[topCategory].visible == true)  		if (CategoryArray[topCategory].hitTestPoint(e.stageX,e.stageY,true)==true && CategoryArray[topCategory].visible == true)		{			//Set the note as a child of the category			//var tempImage:ImageClass = new ImageClass(e.target.txt.text, e.target.user);			//tempImage.InitializeImage();				var tempImage:ImageClass = ImageClass(e.target);			tempImage.maxHeight = 100;			tempImage.maxWidth = 100;						//log event			log('Added image '+tempImage.txt.text+' in Category: '+CategoryArray[topCategory].catName.text);						note_handler.removeChild(Note(e.target));			note_handler.onstage.splice(note_handler.onstage.indexOf(tempImage),1);			//trace('child removed');			//if(note_handler.contains(tempImage))			//	note_handler.removeChild(tempImage);						CategoryArray[topCategory].addChild(tempImage);			tempImage.scaleImage();			//get a position between [-Cat.withd/2, Cat.width/2]			tempImage.x = Math.random()*CategoryArray[topCategory].bg.width/2-Math.random()*CategoryArray[topCategory].bg.width/2; //e.stageX- CategoryArray[topCategory].x ;			tempImage.y = Math.random()*CategoryArray[topCategory].bg.height/2-Math.random()*CategoryArray[topCategory].bg.height/2; //e.stageY- CategoryArray[topCategory].y;			tempImage.alpha = 0.5;						trace("X:"+e.stageX+" Y:"+e.stageY+" CatX:"+CategoryArray[topCategory].x+" CatY:"+CategoryArray[topCategory].y);						tempImage.checkLimits(e.touchPointID);			tempImage.removeEventsImage();			tempImage.addEventsInCategory();						//CategoryArray[topCategory].arrangeChildren();						//Load next note			note_handler.addOnStage();			//note_handler.streamSound();		}	}	public function endOfStage2()	{		nextNote.visible = false;		addChild(screenDim);			screenDimActive=true;		var outputFile:String = new String();		outputFile = "Group"+prefWindow.groupNum.selectedItem.data+"Stage2.xml";		exportXML(outputFile);				addChild(nextStage);				nextStage.x=1920/2;		nextStage.y=1080/2;		nextStage.addEventListener(MouseEvent.CLICK, gotoStage3);			}		public function gotoStage3(e:MouseEvent)	{		removeChild(screenDim);		screenDimActive=false;		removeChild(nextStage);				loadStage3();	}		public function loadStage3()	{		//log event		log("\nStage 3 Loaded.");				phase=3;				// Show Category Buttons		activateCategories();				// Show Notes Buttons		activateNotes();				exitBtn1.addEventListener(TouchEvent.TOUCH_TAP, function(e:TouchEvent){exitApp(0);});		exitBtn2.addEventListener(TouchEvent.TOUCH_TAP, function(e:TouchEvent){exitApp(180);});		exitBtn1.addEventListener(MouseEvent.CLICK, function(e:MouseEvent){exitApp(0);});		exitBtn2.addEventListener(MouseEvent.CLICK, function(e:MouseEvent){exitApp(180);});	}		public function activateCategories()	{		//Deactivate Stage 1 objects		startMsg.visible = false;		instrLbl1.visible = false;		instrLbl2.visible = false;		instrLbl3.visible = false;		instrLbl4.visible = false;				//Activate Stage 2/3 objects		addCateg1.visible = true;		addCateg2.visible = true;		addCateg3.visible = true;		addCateg4.visible = true;						//Button Events with category rotation as a parameter		addCateg1.addEventListener(MouseEvent.CLICK, function(e:MouseEvent){addNewCategory(0);});		addCateg2.addEventListener(MouseEvent.CLICK, function(e:MouseEvent){addNewCategory(90);});		addCateg3.addEventListener(MouseEvent.CLICK, function(e:MouseEvent){addNewCategory(180);});		addCateg4.addEventListener(MouseEvent.CLICK, function(e:MouseEvent){addNewCategory(-90);});		addCateg1.addEventListener(TouchEvent.TOUCH_TAP, function(e:TouchEvent){addNewCategory(0);});		addCateg2.addEventListener(TouchEvent.TOUCH_TAP, function(e:TouchEvent){addNewCategory(90);});		addCateg3.addEventListener(TouchEvent.TOUCH_TAP, function(e:TouchEvent){addNewCategory(180);});		addCateg4.addEventListener(TouchEvent.TOUCH_TAP, function(e:TouchEvent){addNewCategory(-90);});	}		public function activateNotes()	{		addNote1.visible=true;		addNote2.visible=true;		addNote3.visible=true;		addNote4.visible=true;		trashCan.visible=true;		trashCan2.visible=true;		exitBtn1.visible=true;		exitBtn2.visible = true;				trashCan.visible=true;		trashCan2.visible=true;				trashCan.mouseEnabled = true;		trashCan.mouseChildren = true;				trashCan2.mouseEnabled = true;		trashCan2.mouseChildren = true;				addNote1.addEventListener(MouseEvent.CLICK, function(e:MouseEvent){addNewNode(0);});		addNote2.addEventListener(MouseEvent.CLICK, function(e:MouseEvent){addNewNode(90);});		addNote3.addEventListener(MouseEvent.CLICK, function(e:MouseEvent){addNewNode(180);});		addNote4.addEventListener(MouseEvent.CLICK, function(e:MouseEvent){addNewNode(-90);});		addNote1.addEventListener(TouchEvent.TOUCH_TAP, function(e:TouchEvent){addNewNode(0);});		addNote2.addEventListener(TouchEvent.TOUCH_TAP, function(e:TouchEvent){addNewNode(90);});		addNote3.addEventListener(TouchEvent.TOUCH_TAP, function(e:TouchEvent){addNewNode(180);});		addNote4.addEventListener(TouchEvent.TOUCH_TAP, function(e:TouchEvent){addNewNode(-90);});	}		public function exitApp(a:int){		addChild(screenDim);			screenDimActive=true;		addChild(exitMessage);		exitMessage.x=1920/2;		exitMessage.y=1080/2;		exitMessage.rotation = a;				//exitMessage.addEventListener(TouchEvent.TOUCH_TAP,restore);		//log event		log("Exit Application Requested.");				exitMessage.btnYes.addEventListener(TouchEvent.TOUCH_TAP, exportAndExit);		exitMessage.btnNo.addEventListener(TouchEvent.TOUCH_TAP,restore);	}		public function restore(e:TouchEvent){				//log event		log("Exit Application Aborted.");				removeChild(screenDim);		screenDimActive=false;		removeChild(exitMessage);	}		public function exportAndExit(e:TouchEvent)	{		//Export Stage 3 card sorting		var outputFile:String = new String();		outputFile = "Group"+prefWindow.groupNum.selectedItem.data+"Stage3.xml";		exportXML(outputFile);				//log event		log("\n*********Application Exited********\n");		 		//Exit Application		//fscommand("quit");		NativeApplication.nativeApplication.exit();			}		public function exportXML(fileName:String)	{		var file:File ;					file = File.documentsDirectory.resolvePath( "IdeasMappingData/" +today_date.getDate() + "_" + thismonth + "_" + today_date.getFullYear() + "_" + today_date.getHours()+ "." +today_date.getMinutes()+"_"+fileName );				var stream:FileStream = new FileStream()		stream.open(file, FileMode.WRITE);		var str:String = "<?xml version=\"1.0\"?>\n<CardSorting>";				var i:int=0;				while( i<CategoryArray.length) 		{ 						str+="\n\t<category name=\""+CategoryArray[i].catName.text+"\" state=\""+CategoryArray[i].catState+"\">\n\t\t<posts>";			for (var j:uint = 0; j < CategoryArray[i].numChildren; j++)			{				if(CategoryArray[i].getChildAt(j) is Note)					str+="\n\t\t\t<post player=\""+CategoryArray[i].getChildAt(j).user+"\" content=\""+CategoryArray[i].getChildAt(j).txt.text+"\"/>";							}			str+="\n\t\t</posts>";			str+="\n\t</category>";			i++;		}		str += "</CardSorting>";		stream.writeUTFBytes(str);		stream.close();	}		public function addNewCategory(r:int)	{		var player :int;		var myCategory:Category = new Category();				addChild(myCategory);			if(r==0)		{			player = 1;			myCategory.setPlacement(1920/2, 800, r);		}		if(r==90)		{			player = 2;			myCategory.setPlacement(280, 1080/2, r);		}		if(r==180)		{			player = 3;			myCategory.setPlacement(1920/2, 1080-800, r);		}		if (r==-90)		{			player = 4;			myCategory.setPlacement(1920/2, 1080/2, r);		}				myCategory.editCategoryTitle();				//log event		log('Player '+player+' adding new category...');				CategoryArray[CategoryArray.length] = myCategory;	}		public function addNewNode(r:int)	{		var newNode:ManualNote;				if(r==0)		{			newNode= new ManualNote("player1");			addChild(newNode);			newNode.x = 1920/2;			newNode.y = 700;						//log event			log('Player 1 added new note.');		}		if(r==90)		{			newNode= new ManualNote("player2");			addChild(newNode);			newNode.x = 380;			newNode.y = 1080/2;						//log event			log('Player 2 added new note.');		}		if(r==180)		{			newNode= new ManualNote("player3");			addChild(newNode);			newNode.x = 1920/2;			newNode.y = 1080-700;						//log event			log('Player 3 added new note.');		}		if (r==-90)		{			newNode= new ManualNote("player4");			addChild(newNode);			newNode.x = 1920-380;			newNode.y = 1080/2;						//log event			log('Player 4 added new note.');		}				newNode.rotation=r;		newNode.startTyping();	}			public function addScreenDim()	{		addChild(screenDim);			screenDimActive=true;	}		public function removeScreenDim()	{		if(this.contains(screenDim))			removeChild(screenDim);				screenDimActive=false;	}		public function log(action:String)	{		var file:File ;		var time:Date ;		var time_str:String ;				time = new Date();		time_str = time.getFullYear()+"-"+(time.getMonth()+1)+"-"+time.getDate();		try {		file = File.documentsDirectory.resolvePath( "IdeasMappingData/" +time_str + "_" + "log.txt" );				var stream:FileStream = new FileStream()					stream.open(file, FileMode.APPEND);			time_str += "\t"+time.getHours()+":"+time.getMinutes();					trace(time_str+"\t"+action);			stream.writeUTFBytes(time_str+"\t"+action+"\n");			stream.close();		} catch (error:IOError) {			trace("The stream could not be accessed for logging.");		}	}		public function startLoading()	{		//show loader		addScreenDim();		loaderClip.visible = true;	}		public function stopLoading()	{		//show loader		loaderClip.visible = false;		removeScreenDim();	}		public function loaderMsg(msg:String)	{		loaderClip.loadTxt.text = msg;	}	}}