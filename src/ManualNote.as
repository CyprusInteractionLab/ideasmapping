package{		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.TouchEvent;	import flash.ui.Multitouch;	import flash.ui.MultitouchInputMode;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.Font;	import flash.text.TextFormat;	import flash.text.TextFieldType;			public class ManualNote extends rotNzoom	{		//var txt:TextField=new TextField(); 		var user:String;		//var myCategory:Category = new Category();				var myFont:Font = new btnFont();		var myTextFormat:TextFormat = new TextFormat();		var isSet:Boolean = false;		var keyboard:MultiLangKeypad;				public function  ManualNote(usr: String)		{						super();						myTextFormat.font = myFont.fontName;											txt.embedFonts=true;			txt.setTextFormat(myTextFormat);			user=usr;						keyboard= new MultiLangKeypad(txt); 			keyboard.txt=txt;			addChild(keyboard);			keyboard.scaleX*=2;			keyboard.scaleY*=2;						if(usr=="player1")			{				this.bg.gotoAndStop(2);				this.fg.gotoAndStop(2);			}			else 			{				if(usr=="player2")				{					this.bg.gotoAndStop(3);					this.fg.gotoAndStop(3);				}				else				{					if(usr=="player3")					{						this.bg.gotoAndStop(4);						this.fg.gotoAndStop(4);					}					else					{						if(usr=="player4")						{							this.bg.gotoAndStop(5);							this.fg.gotoAndStop(5);						}						else						{							this.bg.gotoAndStop(1);							this.fg.gotoAndStop(1);													}					}				}			}						addEvents();		}						function addEvents()		{			addEventListener(TouchEvent.TOUCH_ROLL_OVER, startDragNote );			addEventListener(TouchEvent.TOUCH_ROLL_OUT,stopDragNote);		}				public function startTyping()		{			main(this.parent).addScreenDim();			parent.setChildIndex(this, parent.numChildren-1);						// show keyboard			keyboard.startType();						setChildIndex(this.keyboard,numChildren-1);		}					public function doneTyping()		{			main(this.parent).removeScreenDim();		}				public function cancelTyping()		{			this.visible = false;						main(this.parent).removeScreenDim();		}						function startDragNote(e:TouchEvent)		{			//startTouchDrag(e.touchPointID);			if(isSet==true)				handleTouch(e);					}						//stop function in main		function stopDragNote(e:TouchEvent)		{									handleStopTouch(e);						if(isSet==false)				return;						var i:int = 0;			var topCategory:int = -1;									while( i<main(this.parent).CategoryArray.length) 			{ 										if (main(this.parent).CategoryArray[i].bg.hitTestPoint(e.stageX,e.stageY,true)==true && main(this.parent).CategoryArray[i].visible == true)    				{												if(topCategory==-1)					{						topCategory=i;					}					else					{						if (main(this.parent).getChildIndex(main(this.parent).CategoryArray[i]) >= main(this.parent).getChildIndex(main(this.parent).CategoryArray[topCategory]))						{									topCategory=i;						}					}											}				i++;			}										//this.txt.text=" "+topCategory;								if (topCategory!=-1 && main(this.parent).CategoryArray[topCategory].hitTestPoint(e.stageX,e.stageY,true)==true && main(this.parent).CategoryArray[topCategory].visible == true)			{										//Set the note as a child of the category				var tempNote:Note = new Note(e.target.txt.text, e.target.user, true);				tempNote.Initialize(e.target.txt.text, e.target.user, true);										main(this.parent).CategoryArray[topCategory].addChild(tempNote);										tempNote.x = e.stageX - main(this.parent).CategoryArray[topCategory].x ;				tempNote.y = e.stageY - main(this.parent).CategoryArray[topCategory].y;				tempNote.alpha = 0.5;										tempNote.checkLimits(e.touchPointID);										tempNote.scaleX *=1.5;				tempNote.scaleY *=1.5;				tempNote.addEventsInCategory();										main (this.parent).removeChild(this);			}					}					}												}