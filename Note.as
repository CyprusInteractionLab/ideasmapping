package{import flash.display.MovieClip;import flash.events.Event;import flash.events.TouchEvent;import flash.ui.Multitouch;import flash.ui.MultitouchInputMode;import flash.events.MouseEvent;import flash.text.TextField;import flash.text.TextFieldAutoSize;import flash.text.Font;import flash.text.TextFormat;import flash.text.TextFieldType;public class Note extends rotNzoom{	var txt:TextField=new TextField();	var user:String;	//var myCategory:Category = new Category();		var lastPosX:Number;	var lastPosY:Number;	var myFont:Font = new btnFont();	var myTextFormat:TextFormat = new TextFormat();	public var handler:noteHandler;		public function Note(text:String, usr: String, beYellow:Boolean)	{		super();				txt.text=text;		user=usr;		//TextFieldAutoSize.CENTER;				//events are added when addEvents()  called		//addEventListener(MouseEvent.MOUSE_DOWN, startDragNote );		//addEventListener(MouseEvent.MOUSE_UP, stopDragNote );				//txt=noteTxt;	}	public function Initialize(text:String, usr: String, beYellow:Boolean)	{		myTextFormat.font = myFont.fontName;		myTextFormat.size = 8;						txt.embedFonts=true;		txt.setTextFormat(myTextFormat);								if(beYellow)		{			trace('Make note yellow');			this.bg.gotoAndStop(1);			this.fg.gotoAndStop(1);					}		else 		{			trace('Keep color and format note!');					if(usr=="player1")			{				this.bg.gotoAndStop(2);				this.fg.gotoAndStop(2);				this.rotation = 0;			}			else 			{				if(usr=="player2")				{					this.bg.gotoAndStop(3);					this.fg.gotoAndStop(3);					this.rotation = 90;				}				else				{					if(usr=="player3")					{						this.bg.gotoAndStop(4);						this.fg.gotoAndStop(4);						this.rotation = 180;					}					else					{						if(usr=="player4")						{							this.bg.gotoAndStop(5);							this.fg.gotoAndStop(5);							this.rotation = -90;						}						else						{							this.bg.gotoAndStop(1);							this.fg.gotoAndStop(2);							this.rotation = 0;						}					}				}			}		}				formatNote();	}			function addEvents()	{		addEventListener(TouchEvent.TOUCH_ROLL_OVER, startDragNote );		addEventListener(TouchEvent.TOUCH_ROLL_OUT,main(this.parent.parent).stopDragNote);	}		function addEventsInCategory()	{		this.addEventListener(TouchEvent.TOUCH_BEGIN, startDragNoteInCategory );		this.addEventListener(TouchEvent.TOUCH_ROLL_OUT,stopDragNote);	}		function formatNote()	{		noteScroll.scrollTarget = txt;		txt.wordWrap = false;		txt.width=4;				addChild(txt);				txt.x = 2;		txt.y = 2;							//txt.border = true;		txt.autoSize=TextFieldAutoSize.LEFT;		txt.selectable=false;				if(txt.width>125)		{			txt.width = 125;			txt.wordWrap = true;		}				if(txt.height > 150)		{			txt.autoSize=TextFieldAutoSize.NONE;			txt.height = 150;			noteScroll.height = txt.height;			noteScroll.visible = true;		}		else		{			noteScroll.visible = false;		}						bg.width = txt.width+30;		bg.height=txt.height+30;				fg.width= txt.width+30;		fg.height=txt.height+30;				bg.x=-bg.width/2;		fg.x=-fg.width/2;		txt.x=fg.x+5;//-txt.width/2;		noteScroll.x = txt.x+txt.width;				fg.y=-fg.height/2;		bg.y=-bg.height/2;		txt.y=fg.y+5; //-txt.height/2;		noteScroll.y = txt.y;				noteScroll.update();				this.x = 1920/2 ;//- bg.width;		this.y = 1080/2 ;//- bg.height;				setChildIndex(fg,2);		//bring the scrollbar to the front		this.setChildIndex(noteScroll,this.numChildren-1);		//fg.swapDepths(MovieClip(txt));				trace(txt.width);		trace(txt.height);			}		function startDragNote(e:TouchEvent)	{		//startTouchDrag(e.touchPointID);		handleTouch(e);			}				function startDragNoteInCategory(e:TouchEvent)	{		//if(main(this.parent.parent).phase==2)			//addEventListener(Event.ENTER_FRAME, function(evt:Event){checkLimits(e.touchPointID);});				lastPosX=this.x;		lastPosY=this.y;				startTouchDrag(e.touchPointID);				Category(this.parent).kidSelected = true;			}		function checkLimits(tpID:int)	{		//tpID : touchPointID		trace('Check Limits: x='+this.x+" y="+this.y+" CatWidth="+Category(this.parent).bg.width);		this.rotation = 0;		if(this.x - this.width/2.0 < -Category(this.parent).bg.width/2.0)		{						stopTouchDrag(tpID);			this.x=-Category(this.parent).bg.width/2.0+5 + this.width/2.0;			removeEventListener(Event.ENTER_FRAME, function(e:Event){checkLimits(tpID);});		}		if(this.y - this.height/2.0 < -Category(parent).bg.height/2.0)		{						stopTouchDrag(tpID);			this.y=-Category(this.parent).bg.height/2.0+5 + this.height/2.0;			removeEventListener(Event.ENTER_FRAME, function(e:Event){checkLimits(tpID);});		}						if(this.y + this.height/2.0 >Category(this.parent).bg.height/2.0)		{			stopTouchDrag(tpID);			this.y=Category(this.parent).bg.height/2 -5-this.height/2.0;			removeEventListener(Event.ENTER_FRAME, function(e:Event){checkLimits(tpID);});		}				if(this.x + this.width/2.0>Category(this.parent).bg.width/2)		{						stopTouchDrag(tpID);			this.x=Category(this.parent).bg.width/2-5-this.width/2.0;			removeEventListener(Event.ENTER_FRAME, function(e:Event){checkLimits(tpID);});			}				}			//stop function in main	function stopDragNote(e:TouchEvent)	{				//if(main(this.parent.parent).phase==2)		//removeEventListener(Event.ENTER_FRAME, function(evt:Event){checkLimits(e.touchPointID);});		//handleStopTouch(e);				//If we are on Stage 2 or the category is not the "Decide Later" category the user does not		// have the right to move the note from the category.		if(main(this.parent.parent).phase==2 && Category(this.parent).catTrash==false){			checkLimits(e.touchPointID);		}		stopTouchDrag(e.touchPointID);				if(main(this.parent.parent).phase==3 || Category(this.parent).catTrash==true)		{						if (Category(this.parent).bg.hitTestPoint(e.stageX,e.stageY,true)==true)			{				checkLimits(e.touchPointID);			}			else			{												var i:int = 0;				var topCategory:int = -1;												while( i<main(this.parent.parent).CategoryArray.length) 				{ 															if(main(this.parent.parent).CategoryArray[i]==Category(this.parent))					{						i++;						continue;					}										if (main(this.parent.parent).CategoryArray[i].bg.hitTestPoint(e.stageX,e.stageY,true)==true && main(this.parent.parent).CategoryArray[i].visible == true)    					{															if(topCategory==-1)						{							topCategory=i;						}						else						{							if (main(this.parent.parent).getChildIndex(main(this.parent.parent).CategoryArray[i])>=main(this.parent.parent).getChildIndex(main(this.parent.parent).CategoryArray[topCategory]))							{								topCategory=i;							}						}											}					i++;				}								//this.txt.text=" "+topCategory;								if (topCategory!=-1 && main(this.parent.parent).CategoryArray[topCategory].hitTestPoint(e.stageX,e.stageY,true)==true && main(this.parent.parent).CategoryArray[topCategory].visible == true)				{					var catFrom:Category = Category(this.parent);					var catTo:Category = main (this.parent.parent).CategoryArray[topCategory];										if (e.target is SoundClass)					{									//Set the note as a child of the category						var tempSound:SoundClass = new SoundClass(e.target.txt.text, e.target.user);						tempSound.InitializeSound();						SoundClass(e.target).sndChannel.stop();												main(this.parent.parent).CategoryArray[topCategory].addChild(tempSound);											tempSound.x = e.stageX - main(this.parent.parent).CategoryArray[topCategory].x ;						tempSound.y = e.stageY - main(this.parent.parent).CategoryArray[topCategory].y;						tempSound.alpha = 0.5;									tempSound.checkLimits(e.touchPointID);												tempSound.addEventsInCategory(); 						Category (this.parent).removeChild(this); 					}					else if (e.target is ImageClass)					{						//var tempImage:ImageClass = new ImageClass(e.target.txt.text, e.target.user);						var tempImage:ImageClass = ImageClass(e.target);						tempImage.maxHeight = 100;						tempImage.maxWidth = 100;						//tempImage.InitializeImage();						tempImage.scaleImage();												main(this.parent.parent).CategoryArray[topCategory].addChild(tempImage);						tempImage.x = e.stageX - main(this.parent.parent).CategoryArray[topCategory].x ;						tempImage.y = e.stageY - main(this.parent.parent).CategoryArray[topCategory].y;						tempImage.alpha = 0.5;									tempImage.checkLimits(e.touchPointID);						tempImage.removeEventsImage();						tempImage.addEventsInCategory();						//Category (this.parent).removeChild(this); 					}										else					{						//Set the note as a child of the category						//var tempNote:Note = new Note(e.target.txt.text, e.target.user, true);						//tempNote.Initialize(e.target.txt.text, e.target.user, true);											var tempNote:Note = Note(e.target);												main(this.parent.parent).CategoryArray[topCategory].addChild(tempNote);											tempNote.x = e.stageX - main(this.parent.parent).CategoryArray[topCategory].x ;						tempNote.y = e.stageY - main(this.parent.parent).CategoryArray[topCategory].y;						tempNote.alpha = 0.5;											tempNote.checkLimits(e.touchPointID);											//tempNote.scaleX *=1.5;						//tempNote.scaleY *=1.5;						tempNote.addEventsInCategory();						//Category (this.parent).removeChild(this);					}										main(this.parent.parent).log("Moved Note "+this.txt.text+" from Category "+catFrom.catName.text+" to Category "+catTo.catName.text);				}				else if (main(this.parent.parent).trashCan.hitTestPoint(e.stageX,e.stageY,true)==true)				{					Category(this.parent).removeChild(this);									}				else if (main(this.parent.parent).trashCan2.hitTestPoint(e.stageX,e.stageY,true)==true)				{					Category(this.parent).removeChild(this);									}				else				{					//Return to last safe position					this.x=lastPosX;					this.y=lastPosY;				}			}					}			}		}}